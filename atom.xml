<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Civinx]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-10-27T09:46:24.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Civinx]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[2015/10/27]]></title>
    <link href="http://yoursite.com/2015/10/27/2015-10-27/"/>
    <id>http://yoursite.com/2015/10/27/2015-10-27/</id>
    <published>2015-10-27T09:05:17.000Z</published>
    <updated>2015-10-27T09:46:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="#阉割版N皇后">#阉割版N皇后</h2><blockquote>
<p>Description</p>
<p>听说过经典的“八皇后”吗？不过，这一次不是八皇后，而是 N 皇后。假设有一个棋盘，是N行N列的，现在有 N 个皇后，需要布置到棋盘上，要求每横行，每纵列只允许有一个皇后。你知道有多少种方法吗？</p>
<p>Input</p>
<p>测试数据有多组，每组一个数字N（2≤N≤30），表示棋盘的边长。</p>
<p>Output</p>
<p>输出棋盘的布置方法的总数。</p>
<p>Sample Input</p>
<p>2</p>
<p>3</p>
<p>Sample Output</p>
<p>2</p>
<p>6</p>
</blockquote>
<hr>
<p>面对61/207的AC率，之前一直没有A下真是非常难受，遂决定A之。<br>说是总结题目，其实也就是水一波Markdown。</p>
<p>因为蠢，老老实实地去学习了回溯法，于是出现了如下的代码。</p>
<pre><code><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span>
<span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span>
<span class="keyword">int</span> ans[<span class="number">30</span>];
<span class="keyword">double</span> tot;

<span class="function"><span class="keyword">void</span> <span class="title">search</span> <span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> n)</span></span>{
    <span class="keyword">if</span> (cur == n) tot ++;
    <span class="keyword">else</span> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++){
        <span class="keyword">if</span> (!ans[i]){
            ans[i] = <span class="number">1</span>;
            search(cur+<span class="number">1</span>, n);
            ans[i] = <span class="number">0</span>;
        }
    }
}

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{
    <span class="keyword">int</span> n;
    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) != EOF) {
        tot = <span class="number">0</span>;
        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));
        search(<span class="number">0</span>, n);
        <span class="built_in">printf</span>(<span class="string">"%.f\n"</span>,tot);
    }
    <span class="keyword">return</span> <span class="number">0</span>;
}
</code></pre><p>然而，当N==11的时候，程序以及临近爆炸。想了想，尼玛循环最多30!次，果然是蠢。咦，30!，似乎发现了什么不可告人的秘密，观察了前五项，果然结果即为n!。脑子里过了一遍，又喷了一遍自己弱智。</p>
<p>好吧，人生第一次大数乘法，阉割版的那种。</p>
<pre><code><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span>
<span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span>
<span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span>
<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;
<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{
    <span class="keyword">int</span> n;
    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) {
        <span class="built_in">string</span> a, b;
        <span class="built_in">stringstream</span> ss;
        a = <span class="string">"1"</span>;
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) {
            <span class="keyword">int</span> carry = <span class="number">0</span>;
            <span class="keyword">for</span> (<span class="keyword">int</span> j = a.length()-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j --) {
                ss.clear();
                ss &lt;&lt; ((a[j]-<span class="string">'0'</span>) * i + carry) % <span class="number">10</span>;
                carry = ((a[j]-<span class="string">'0'</span>) * i + carry) / <span class="number">10</span>;
                ss &gt;&gt; a[j];
                <span class="keyword">if</span> (!j &amp;&amp; carry) {
                    ss.clear();
                    ss &lt;&lt; carry;
                    ss &gt;&gt; b;
                    a = b + a;
                }
            }
        }
        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">'\n'</span>;
    }
}
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="#阉割版N皇后">#阉割版N皇后</h2><blockquote>
<p>Description</p>
<p>听说过经典的“八皇后”吗？不过，这一次不是八皇后，而是 N 皇后。假设有一个棋盘，是N行N列的，现在有 N 个皇后，需要布置到棋盘上，要求每横行，每纵列]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[偷闲的地儿]]></title>
    <link href="http://yoursite.com/2015/10/24/%E5%81%B7%E9%97%B2%E7%9A%84%E5%9C%B0%E5%84%BF/"/>
    <id>http://yoursite.com/2015/10/24/偷闲的地儿/</id>
    <published>2015-10-24T08:54:34.000Z</published>
    <updated>2015-10-24T11:30:44.000Z</updated>
    <content type="html"><![CDATA[<p>花了三天，在各路大神的帮助下总算是勉强搭完了这<em>避难所</em>。</p>
<p>远离喧嚣，免得被<em>某博某信某空间</em>拉低智商。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>花了三天，在各路大神的帮助下总算是勉强搭完了这<em>避难所</em>。</p>
<p>远离喧嚣，免得被<em>某博某信某空间</em>拉低智商。</p>
]]>
    </summary>
    
  </entry>
  
</feed>
